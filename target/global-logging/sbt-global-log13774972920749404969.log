[debug] > Exec(early(addDefaultCommands), None, None)
[debug] > Exec(addDefaultCommands, None, None)
[debug] > Exec(early(initialize), None, None)
[debug] > Exec(initialize, None, None)
[debug] > Exec(early(addPluginSbtFile="""C:\Users\hahap\AppData\Local\Temp\idea.sbt"""), None, None)
[debug] > Exec(addPluginSbtFile="""C:\Users\hahap\AppData\Local\Temp\idea.sbt""", None, None)
[debug] > Exec(boot, None, None)
[debug] > Exec(writeSbtVersion, None, None)
[debug] > Exec(reload, None, None)
[debug] > Exec(sbtStashOnFailure, None, None)
[debug] > Exec(onFailure loadFailed, None, None)
[debug] > Exec(loadp, None, None)
[info] welcome to sbt 1.9.9 (Oracle Corporation Java 17.0.7)
[debug] Load.defaultLoad until apply took 80.8879ms
[debug]           Load.loadUnit: plugins took 62.8681ms
[debug]           Load.loadUnit: defsScala took 0.3007ms
[debug] [Loading] Scanning directory C:\Users\hahap\IdeaProjects\LetsStart\project
[debug]             Load.loadUnit: mkEval took 7.0669ms
[debug] [Loading] Found non-root projects 
[debug] [Loading] Done in C:\Users\hahap\IdeaProjects\LetsStart\project, returning: ()
[debug] deducing auto plugins based on known facts Set(Atom(sbt.plugins.CorePlugin)) and clauses Clauses(Clause(Atom(sbt.plugins.JvmPlugin),Set(Atom(sbt.plugins.IvyPlugin)))
[debug] Clause(Atom(sbt.ScriptedPlugin),Set(Atom(sbt.plugins.JvmPlugin)))
[debug] Clause(Atom(sbt.plugins.SbtPlugin),Set(Atom(sbt.ScriptedPlugin)))
[debug] Clause(Atom(sbt.plugins.SemanticdbPlugin),Set(Atom(sbt.plugins.JvmPlugin)))
[debug] Clause(Atom(sbt.plugins.JUnitXmlReportPlugin),Set(Atom(sbt.plugins.JvmPlugin)))
[debug] Clause(Atom(sbt.plugins.MiniDependencyTreePlugin),Set(Atom(sbt.plugins.JvmPlugin)))
[debug] Clause(Atom(sbt.plugins.CorePlugin),Set(Atom(sbt.plugins.IvyPlugin)))
[debug] Clause(Atom(sbt.plugins.IvyPlugin),Set(Atom(sbt.plugins.JvmPlugin)))
[debug] Clause(Atom(sbt.plugins.JvmPlugin),Set(Atom(sbt.plugins.SemanticdbPlugin)))
[debug] Clause(Atom(sbt.plugins.JvmPlugin),Set(Atom(sbt.plugins.JUnitXmlReportPlugin)))
[debug] Clause(Atom(sbt.plugins.CorePlugin),Set(Atom(sbt.plugins.Giter8TemplatePlugin)))
[debug] Clause(Atom(sbt.plugins.JvmPlugin),Set(Atom(sbt.plugins.MiniDependencyTreePlugin))))
[debug]   :: deduced result: Matched(sbt.plugins.CorePlugin,sbt.plugins.Giter8TemplatePlugin,sbt.plugins.IvyPlugin,sbt.plugins.JvmPlugin,sbt.plugins.MiniDependencyTreePlugin,sbt.plugins.JUnitXmlReportPlugin,sbt.plugins.SemanticdbPlugin)
[debug] Plugins.deducer#function took 9.6149 ms
[info] loading settings for project letsstart-build from idea.sbt ...
[debug]               Load.resolveProject(letsstart-build) took 32.1072ms
[debug]             Load.loadTransitive: finalizeProject(Project(id letsstart-build, base: C:\Users\hahap\IdeaProjects\LetsStart\project, plugins: List(<none>))) took 46.8408ms
[debug] [Loading] Done in C:\Users\hahap\IdeaProjects\LetsStart\project, returning: (letsstart-build)
[debug]           Load.loadUnit: loadedProjectsRaw took 1746.1286ms
[debug]           Load.loadUnit: cleanEvalClasses took 6.0779ms
[debug]         Load.loadUnit(file:/C:/Users/hahap/IdeaProjects/LetsStart/project/, ...) took 1819.1987ms
[debug]       Load.apply: load took 1900.7998ms
[debug]       Load.apply: resolveProjects took 3.5019ms
[debug]       Load.apply: finalTransforms took 38.964ms
[debug]       Load.apply: config.delegates took 4.3941ms
[debug]       Load.apply: Def.make(settings)... took 247.3649ms
[debug]       Load.apply: structureIndex took 57.3302ms
[debug]       Load.apply: mkStreams took 1.1671ms
[info] loading project definition from C:\Users\hahap\IdeaProjects\LetsStart\project
[debug] Running task... Cancel: Signal, check cycles: false, forcegc: true
[debug]     Load.loadUnit: plugins took 3296.9141ms
[debug]     Load.loadUnit: defsScala took 0.0027ms
[debug] [Loading] Scanning directory C:\Users\hahap\IdeaProjects\LetsStart
[debug]       Load.loadUnit: mkEval took 0.2252ms
[debug] [Loading] Found root project root w/ remaining 
[debug] deducing auto plugins based on known facts Set(Atom(sbt.plugins.CorePlugin)) and clauses Clauses(Clause(Atom(sbt.plugins.JvmPlugin),Set(Atom(sbt.plugins.IvyPlugin)))
[debug] Clause(Atom(sbt.ScriptedPlugin),Set(Atom(sbt.plugins.JvmPlugin)))
[debug] Clause(Atom(sbt.plugins.SbtPlugin),Set(Atom(sbt.ScriptedPlugin)))
[debug] Clause(Atom(sbt.plugins.SemanticdbPlugin),Set(Atom(sbt.plugins.JvmPlugin)))
[debug] Clause(Atom(sbt.plugins.JUnitXmlReportPlugin),Set(Atom(sbt.plugins.JvmPlugin)))
[debug] Clause(Atom(sbt.plugins.MiniDependencyTreePlugin),Set(Atom(sbt.plugins.JvmPlugin)))
[debug] Clause(Atom(org.jetbrains.sbt.StructurePlugin),Set(Atom(sbt.plugins.JvmPlugin)))
[debug] Clause(Atom(org.jetbrains.sbt.IdeaShellPlugin),Set(Atom(sbt.plugins.JvmPlugin)))
[debug] Clause(Atom(org.jetbrains.sbt.indices.SbtIntellijIndicesPlugin),Set(Atom(sbt.plugins.JvmPlugin)))
[debug] Clause(Atom(sbt.plugins.CorePlugin),Set(Atom(sbt.plugins.IvyPlugin)))
[debug] Clause(Atom(sbt.plugins.IvyPlugin),Set(Atom(sbt.plugins.JvmPlugin)))
[debug] Clause(Atom(sbt.plugins.JvmPlugin),Set(Atom(sbt.plugins.SemanticdbPlugin)))
[debug] Clause(Atom(sbt.plugins.JvmPlugin),Set(Atom(sbt.plugins.JUnitXmlReportPlugin)))
[debug] Clause(Atom(sbt.plugins.CorePlugin),Set(Atom(sbt.plugins.Giter8TemplatePlugin)))
[debug] Clause(Atom(sbt.plugins.JvmPlugin),Set(Atom(sbt.plugins.MiniDependencyTreePlugin)))
[debug] Clause(Atom(sbt.plugins.JvmPlugin),Set(Atom(org.jetbrains.sbt.StructurePlugin)))
[debug] Clause(Atom(sbt.plugins.JvmPlugin),Set(Atom(org.jetbrains.sbt.IdeaShellPlugin)))
[debug] Clause(And(Set(Atom(sbt.plugins.CorePlugin), Atom(sbt.plugins.JvmPlugin))),Set(Atom(org.jetbrains.sbt.indices.SbtIntellijIndicesPlugin))))
[debug]   :: deduced result: Matched(sbt.plugins.CorePlugin,sbt.plugins.Giter8TemplatePlugin,sbt.plugins.IvyPlugin,sbt.plugins.JvmPlugin,sbt.plugins.SemanticdbPlugin,org.jetbrains.sbt.indices.SbtIntellijIndicesPlugin,sbt.plugins.JUnitXmlReportPlugin,org.jetbrains.sbt.IdeaShellPlugin,org.jetbrains.sbt.StructurePlugin,sbt.plugins.MiniDependencyTreePlugin)
[debug] Plugins.deducer#function took 1.2384 ms
[info] loading settings for project root from build.sbt ...
[debug]         Load.resolveProject(root) took 16.9807ms
[debug]       Load.loadTransitive: finalizeProject(Project(id root, base: C:\Users\hahap\IdeaProjects\LetsStart, plugins: List(<none>))) took 19.2019ms
[debug] [Loading] Done in C:\Users\hahap\IdeaProjects\LetsStart, returning: (root)
[debug]     Load.loadUnit: loadedProjectsRaw took 696.4353ms
[debug]     Load.loadUnit: cleanEvalClasses took 12.33ms
[debug]   Load.loadUnit(file:/C:/Users/hahap/IdeaProjects/LetsStart/, ...) took 4007.0187ms
[debug] Load.apply: load took 4020.2177ms
[debug] Load.apply: resolveProjects took 0.1059ms
[debug] Load.apply: finalTransforms took 23.9734ms
[debug] Load.apply: config.delegates took 0.2323ms
[debug] Load.apply: Def.make(settings)... took 47.3427ms
[debug] Load.apply: structureIndex took 17.5653ms
[debug] Load.apply: mkStreams took 0.0025ms
[info] set current project to LetsStart (in build file:/C:/Users/hahap/IdeaProjects/LetsStart/)
[debug] > Exec(sbtPopOnFailure, None, None)
[debug] > Exec(resumeFromFailure, None, None)
[debug] > Exec(notifyUsersAboutShell, None, None)
[debug] > Exec(iflast shell, None, None)
[debug] > Exec(; set ideaPort in Global := 60233 ; idea-shell, None, None)
[debug] > Exec(set ideaPort in Global := 60233, None, None)
[info] Defining Global / ideaPort
[info] The new value will be used by Compile / compile, Test / compile
[debug] Defining 
[debug] 	Global / ideaPort
[debug] 
[debug] The new value will be used by 
[debug] 	Compile / compile
[debug] 	Test / compile
[info] Reapplying settings...
[info] set current project to LetsStart (in build file:/C:/Users/hahap/IdeaProjects/LetsStart/)
[debug] > Exec(idea-shell, None, None)
